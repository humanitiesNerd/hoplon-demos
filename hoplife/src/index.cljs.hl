(page "index.html"
  (:require [tailrecursion.hoplon.reload :refer [reload-all]]))

(reload-all)

(def   default    #{[2 1] [2 2] [0 1] [1 2] [2 0] [13 11] [12 11] [11 11]})
(def   +size+     16)
(def   +interval+ 200)
(defc  running?   true)
(defc  alive      default)

;; See http://clj-me.cgrand.net/2011/08/19/conways-game-of-life/
;; Slightly modified to be toroidal
(defn neighbours [[x y]]
  (for [dx [-1 0 1] dy (if (zero? dx) [-1 1] [-1 0 1])]
    [(mod (+ dx x) +size+) (mod (+ dy y) +size+)]))

(defn step [cells]
  (set (for [[loc n] (frequencies (mapcat neighbours cells))
             :when (or (= n 3) (and (= n 2) (cells loc)))]
         loc)))

(defn click [cells xy]
  ((if (contains? cells xy) disj conj) cells xy))

(with-init!
  (with-interval +interval+
    (when @running?
      (swap! alive step))))

(html
  (head
   (title "Hoplife")
   (style :type "text/css"
     ;;{{
     table,th,td { margin:0; padding:0; border-spacing:0; }
     table       { border:1px solid black; }
     td          { width:16px; height:16px; cursor:pointer; }
     td.alive    { background-color: black; }
     ;;}}
    ))
  (body
   (button :click #(swap! running? not) :text (cell= (if running? "Stop" "Start")))
   (button :click #(swap! alive into default) "Reset")
   (table
    (for [x (range +size+)]
      (tr (for [y (range +size+)]
            (td :click #(swap! alive click [x y])
                :class (cell= {"alive" (contains? alive [x y])}))))))
   (p (a :href "https://github.com/tailrecursion/hoplon-demos/tree/master/hoplife" "Source Code"))
   (p (a :href "mio.html" "Cristophe's version"))
))
